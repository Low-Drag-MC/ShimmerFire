buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// MixinGradle:
apply plugin: 'org.spongepowered.mixin'

version = "${minecraft_version}-${mod_version}"
group = 'com.github.low-drag-mc'
archivesBaseName = '${mod_name}'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

boolean hasShimmer = findProject(':Shimmer') != null

if (hasShimmer) {
    println('Shimmer in local workspace')
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"


String getenv() {
    boolean vscode = gradle.startParameter.taskNames[0].equals("genVSCodeRuns")  || gradle.startParameter.taskNames[0].equals(":genVSCodeRuns")
    boolean hasShimmer = findProject(':Shimmer') != null

    String resourcePath = vscode ? 'bin/main' : 'build/resources/main'
    String codePath = vscode ? 'bin/main' : 'build/classes/java/main'
    String s = "shimmerfire%%${project.file(resourcePath)}" + getPathSeparator() + "shimmerfire%%${project.file(codePath)}"
    if (hasShimmer) {
        s += getPathSeparator() + "shimmer%%${project(':Shimmer').file(resourcePath)}" + getPathSeparator() + "shimmer%%${project(':Shimmer').file(codePath)}"
    }
    return s
}
import org.apache.tools.ant.taskdefs.condition.Os

static def getPathSeparator() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return ";"
    }
    return ":"
}

minecraft {
    mappings channel: 'parchment', version: "${mappings_version}"

//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=shimmerfire.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            if (hasShimmer) {
                environment('MOD_CLASSES', this.getenv())
            }
            arg "-mixin.config=shimmer.mixins.json"

            mods {
                shimmerfire {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=shimmerfire.mixins.json"

            property 'forge.logging.console.level', 'debug'

            if (hasShimmer) {
                environment('MOD_CLASSES', this.getenv())
            }
            arg "-mixin.config=shimmer.mixins.json"

            mods {
                shimmerfire {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=shimmerfire.mixins.json"

            property 'forge.logging.console.level', 'debug'

            if (hasShimmer) {
                environment('MOD_CLASSES', this.getenv())
            }
            arg "-mixin.config=shimmer.mixins.json"

            mods {
                shimmerfire {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            if (hasShimmer) {
                environment('MOD_CLASSES', this.getenv())
            }
            arg "-mixin.config=shimmer.mixins.json"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'shimmerfire', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                shimmerfire {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

//    dec(files("libs/shimmer-1.18.2-0.2.jar"))
//    implementation fg.deobf("blank:shimmer-1.18.2:0.1")
    if (hasShimmer) {
        implementation project(path: ':Shimmer')
    }
    implementation fg.deobf("blank:cannonfire-forge-1.18:0.1.4")

    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }

}

mixin {
    add sourceSets.main, 'shimmerfire.refmap.json'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "shimmerfire",
                "Specification-Vendor"    : "shimmerfire",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "shimmerfire",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'shimmerfire.mixins.json'
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
